#![warn(missing_debug_implementations, rust_2018_idioms)]

use std::fs::OpenOptions;
use std::io;
use std::io::{ErrorKind, Write};

use crate::domain::Entry::{Breakpoint, Command, DisplayFile, Heading, Markdown};
use crate::domain::MarkdownRunnable;
use crate::domain::{Context, Document};
use crate::utils::cla::Args;

mod domain;
mod utils;

fn main() -> io::Result<()> {
    let args = Args::create();

    for file in args.files() {
        println!("Running file: {}", file);
        let json = file.read();
        let document = Document::parse(&json).expect("Failed to parse JSON file");
        let mut context = Context::from(&document).with_current_dir(file.parent_dir());

        let path = "README.md";
        create_file(path, "[//]: # (Automatically generated by Sociable Weaver)")?;

        for entry in document.entries() {
            match entry {
                Command(entry) => append_to_file(path, entry.to_markdown(&mut context))?,
                DisplayFile(entry) => append_to_file(path, entry.to_markdown(&mut context))?,
                Heading(entry) => append_to_file(path, entry.to_markdown(&mut context))?,
                Markdown(entry) => append_to_file(path, entry.to_markdown(&mut context))?,
                Breakpoint(_) => return Ok(()),
                _ => { /* Skip for now */ }
            }
        }
    }

    Ok(())
}

fn create_file(path: &str, text: &str) -> io::Result<()> {
    let mut file = OpenOptions::new()
        .write(true)
        .truncate(true)
        .create(true)
        .open(path)?;

    writeln!(file, "{}", text)
}

fn append_to_file(path: &str, result: Result<String, String>) -> io::Result<()> {
    let mut file = OpenOptions::new().append(true).open(path)?;

    match result {
        Ok(text) => writeln!(file, "{}", text),
        Err(error) => {
            writeln!(file, "{}", error)?;
            Err(io::Error::new(ErrorKind::Other, error))
        }
    }
}
